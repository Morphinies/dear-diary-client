@import '../../style/const.scss';

.listWrap.contentCenter {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: center;
}

.list {
  overflow: hidden;
  border-radius: $rad;
  border: 1px solid transparent;
  border: 1px solid var(--border);
  transition: all 0.5s ease-in-out;
  background-color: var(--font-color-transp-x2);
  button {
    z-index: 2;
    border: none;
    background-color: transparent;
  }
  &.load {
    pointer-events: none;
  }
  li {
    gap: 1rem;
    display: flex;
    cursor: default;
    box-shadow: none;
    position: relative;
    align-items: center;
    color: var(--font-color-transp);
    border-left: 4px solid transparent;
    @extend .lightBlock;
    &::before {
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      content: '';
      position: absolute;
    }
  }
  li[data-color-id='1'] {
    border-color: $important1;
    &:active {
      &::before {
        background-color: $important1Transp;
      }
    }
  }
  li[data-color-id='2'] {
    border-color: $important2;
    &:active {
      &::before {
        background-color: $important2Transp;
      }
    }
  }
  li[data-color-id='3'] {
    border-color: $important3;
    &:active {
      &::before {
        background-color: $important3Transp;
      }
    }
  }
}

.list:not(.withHandleSort) {
  .btnDraggable {
    display: none;
  }
  .item {
    padding-left: 1rem;
  }
}

.text {
  flex: 1;
  padding: 0.5rem 0;
}

.time {
  flex-shrink: 0;
  &.expired {
    color: $danger;
  }
  &.completed {
    color: $success;
  }
}

.btnEdit {
  svg {
    padding: 2px;
  }
}

.btnToggleList {
  justify-self: flex-end;
}

.btnMenu svg {
  padding: 0.2rem;
}

.btnChecked,
.btnArchive {
  svg {
    padding-top: 0.15rem;
  }
}

.btnDel,
.btnEdit,
.btnChecked,
.btnArchive {
  polygon,
  path {
    fill: none;
    transition: $fastTrans;
  }
  &:active {
    polygon,
    path {
      fill: none;
    }
  }
}

.itemMenu {
  width: 0;
  height: 0;
  opacity: 0;
  z-index: 2;
  display: flex;
  overflow: hidden;
  transition: $slowTrans;
  &.opened {
    width: 100%;
    height: 100%;
    opacity: 100%;
  }
  &__wrap {
    justify-content: flex-end;
  }
}

@media (hover) and (min-width: 700px) {
  .list {
    button:hover {
      background-color: transparent;
    }
  }
  .itemMenu {
    width: 100%;
    height: 100%;
    transition: $fastTrans;
  }
  .btnDel,
  .btnEdit,
  .btnChecked,
  .btnArchive {
    &:hover,
    &:active {
      polygon,
      path {
        fill: none;
      }
    }
  }
  .btnEdit:hover,
  .btnEdit:active {
    polygon,
    path {
      stroke: $important2;
    }
  }
  .btnChecked:hover,
  .btnChecked:active {
    polygon,
    path {
      stroke: $important3;
    }
  }
  .completed:hover,
  .completed:active {
    polygon,
    path {
      stroke: $important2;
    }
  }
  .btnDel:hover,
  .btnDel:active {
    polygon,
    path {
      stroke: $important1;
    }
  }
  .btnMenu {
    display: none;
  }
  .item:hover {
    .text {
      color: var(--font-color);
    }
    .itemMenu {
      opacity: 1;
    }
  }
  .list {
    li:hover .btnMenu {
      opacity: 1;
    }
    li[data-color-id='1'] {
      &:hover {
        &::before {
          background-color: $important1Transp;
        }
      }
    }
    li[data-color-id='2'] {
      &:hover {
        &::before {
          background-color: $important2Transp;
        }
      }
    }
    li[data-color-id='3'] {
      &:hover {
        &::before {
          background-color: $important3Transp;
        }
      }
    }
  }
}

@media (max-width: 700px) {
  .list .item {
    row-gap: 0;
    display: grid;
    column-gap: 0.5rem;
    align-items: flex-start;
    grid-template-columns: auto 1fr auto;
  }
  .btnDraggable {
    grid-area: 1/1/3/2;
  }
  .text {
    grid-area: 1/2/2/3;
  }
  .time {
    grid-area: 2/2/3/3;
    padding-bottom: 0.5rem;
  }
  .itemMenu__wrap {
    grid-area: 1/3/4/4;
    flex-direction: column-reverse;
  }
  .itemMenu {
    gap: 0.25rem;
    margin-bottom: 0.5rem;
    align-self: flex-end;
    flex-direction: column;
    button {
      border-radius: $rad 0 0 $rad;
      background-color: var(--transp);
    }
  }

  .list:not(.withHandleSort) {
    .item {
      padding-left: 0;
    }
  }
}
